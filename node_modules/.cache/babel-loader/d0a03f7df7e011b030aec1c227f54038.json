{"ast":null,"code":"var _jsxFileName = \"/Users/fang/Documents/React-Complete-Guide/us-covid19/src/App.js\";\nimport React, { Component } from 'react';\nimport Map from './Component/Map';\nimport InfoBox from './Component/InfoBox';\nimport LineChart from './Component/LineChart';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      beginString: 'Hi, this is a visualization map for showing COVID-19 confirmed cases in United States. Now you can click on the map to see trend chart for each states. The open data is on the Github provided by JHU CSSE.',\n      NowState: '',\n      response: '',\n      NowSeries: [],\n      showChart: false,\n      showDynamicMap: false,\n      colors: ['#61c661', '#b1dbb9', '#c6e9c6', '#ffe693', '#ffd950', '#ffbb56', '#f2b691', '#f49a61', '#f4833d', '#f76d17', 'ff5619', '#ff3f00'],\n      stateColor: {\n        'Alabama': '#333',\n        'Alaska': '#333',\n        'Arizona': '#333',\n        'Arkansas': '#333',\n        'California': '#333',\n        'Colorado': '#333',\n        'Connecticut': '#333',\n        'Delaware': '#333',\n        'District of Columbia': '#333',\n        'Florida': '#333',\n        'Georgia': '#333',\n        'Hawaii': '#333',\n        'Idaho': '#333',\n        'Illinois': '#333',\n        'Indiana': '#333',\n        'Iowa': '#333',\n        'Kansas': '#333',\n        'Kentucky': '#333',\n        'Louisiana': '#333',\n        'Maine': '#333',\n        'Maryland': '#333',\n        'Massachusetts': '#333',\n        'Michigan': '#333',\n        'Minnesota': '#333',\n        'Mississippi': '#333',\n        'Missouri': '#333',\n        'Montana': '#333',\n        'Nebraska': '#333',\n        'Nevada': '#333',\n        'New Hampshire': '#333',\n        'New Jersey': '#333',\n        'New Mexico': '#333',\n        'New York': '#333',\n        'North Carolina': '#333',\n        'North Dakota': '#333',\n        'Ohio': '#333',\n        'Oklahoma': '#333',\n        'Oregon': '#333',\n        'Pennsylvania': '#333',\n        'Rhode Island': '#333',\n        'South Carolina': '#333',\n        'South Dakota': '#333',\n        'Tennessee': '#333',\n        'Texas': '#333',\n        'Utah': '#333',\n        'Vermont': '#333',\n        'Virginia': '#333',\n        'Washington': '#333',\n        'West Virginia': '#333',\n        'Wisconsin': '#333',\n        'Wyoming': '#333',\n        'Grand Princess': '#333'\n      },\n      DynamicColor: {\n        'Alabama': '#333',\n        'Alaska': '#333',\n        'Arizona': '#333',\n        'Arkansas': '#333',\n        'California': '#333',\n        'Colorado': '#333',\n        'Connecticut': '#333',\n        'Delaware': '#333',\n        'District of Columbia': '#333',\n        'Florida': '#333',\n        'Georgia': '#333',\n        'Hawaii': '#333',\n        'Idaho': '#333',\n        'Illinois': '#333',\n        'Indiana': '#333',\n        'Iowa': '#333',\n        'Kansas': '#333',\n        'Kentucky': '#333',\n        'Louisiana': '#333',\n        'Maine': '#333',\n        'Maryland': '#333',\n        'Massachusetts': '#333',\n        'Michigan': '#333',\n        'Minnesota': '#333',\n        'Mississippi': '#333',\n        'Missouri': '#333',\n        'Montana': '#333',\n        'Nebraska': '#333',\n        'Nevada': '#333',\n        'New Hampshire': '#333',\n        'New Jersey': '#333',\n        'New Mexico': '#333',\n        'New York': '#333',\n        'North Carolina': '#333',\n        'North Dakota': '#333',\n        'Ohio': '#333',\n        'Oklahoma': '#333',\n        'Oregon': '#333',\n        'Pennsylvania': '#333',\n        'Rhode Island': '#333',\n        'South Carolina': '#333',\n        'South Dakota': '#333',\n        'Tennessee': '#333',\n        'Texas': '#333',\n        'Utah': '#333',\n        'Vermont': '#333',\n        'Virginia': '#333',\n        'Washington': '#333',\n        'West Virginia': '#333',\n        'Wisconsin': '#333',\n        'Wyoming': '#333',\n        'Grand Princess': '#333'\n      }\n    };\n\n    this.generateColor = index => {\n      // let state_color = [];\n      //let copy = this.state.response.states;\n      //this.setState({stateColor:copy});\n      //console.log(this.state.stateColor);\n      index = 0;\n\n      for (let key in this.state.response.states) {\n        let num = this.state.response.states[key];\n        console.log(key);\n\n        if (num[index] <= 10) {\n          return this.state.colors[0];\n        } else if (num[index] > 10 && num[index] <= 100) {\n          return this.state.colors[1];\n        } else if (num[index] > 100 && num[index] <= 500) {\n          return this.state.colors[2];\n        } else if (num[index] > 500 && num[index] <= 1000) {\n          return this.state.colors[3];\n        } else if (num[index] > 1000 && num[index] <= 2000) {\n          return this.state.colors[4];\n        } else if (num[index] > 2000 && num[index] <= 4000) {\n          return this.state.colors[5];\n        } else if (num[index] > 4000 && num[index] <= 8000) {\n          return this.state.colors[6];\n        } else if (num[index] > 8000 && num[index] <= 12000) {\n          return this.state.colors[7];\n        } else if (num[index] > 12000 && num[index] <= 16000) {\n          return this.state.colors[8];\n        } else if (num[index] > 16000 && num[index] <= 20000) {\n          return this.state.colors[9];\n        } else if (num[index] > 20000 && num[index] <= 30000) {\n          return this.state.colors[10];\n        } else if (num[index] > 30000) {\n          return this.state.colors[11];\n        } // let series = this.state.response.states[key].map((num)=>{\n        //   if(num<=10){\n        //     return this.state.colors[0];\n        //   }\n        //   else if(num>10 && num<=100){\n        //     return this.state.colors[1];\n        //   }\n        //   else if(num>100 && num<=500){\n        //     return this.state.colors[2];\n        //   }\n        //   else if(num>500 && num<=1000){\n        //     return this.state.colors[3];\n        //   }\n        //   else if(num>1000 && num<=2000){\n        //     return this.state.colors[4];\n        //   }\n        //   else if(num>2000 && num<=4000){\n        //     return this.state.colors[5];\n        //   }\n        //   else if(num>4000 && num<=8000){\n        //     return this.state.colors[6];\n        //   }\n        //   else if(num>8000 && num<=12000){\n        //     return this.state.colors[7];\n        //   }\n        //   else if(num>12000 && num<=16000){\n        //     return this.state.colors[8];\n        //   }\n        //   else if(num>16000 && num<=20000){\n        //     return this.state.colors[9];\n        //   }\n        //   else if(num>20000 && num<=30000){\n        //     return this.state.colors[10];\n        //   }\n        //   else if(num>30000){\n        //     return this.state.colors[11];\n        //   }\n        // })\n\n\n        if (this.state.DynamicColor.hasOwnProperty(key)) {\n          const newColor = this.state.DynamicColor;\n          newColor[key] = num;\n          this.setState({\n            DynamicColor: newColor\n          });\n        } else {\n          this.setState({\n            DynamicColor: { ...this.state.DynamicColor,\n              [key]: num\n            }\n          });\n        } // if(this.state.stateColor.hasOwnProperty(key)){   \n        //   const newColor  = this.state.stateColor;\n        //   newColor[key] = series;\n        //   this.setState({stateColor:newColor});\n        // }\n        // else{\n        //   this.setState({stateColor:{...this.state.stateColor, [key]:series}});\n        // }\n\n      }\n\n      console.log(this.state.DynamicColor);\n    };\n\n    this.callApi = async () => {\n      const response = await fetch('/api');\n      console.log(response);\n      const body = await response.json();\n      console.log(\"success\");\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.onClick = e => {\n      //this.generateColor();\n      this.setState({\n        showChart: true,\n        showDynamicMap: false\n      });\n      let Nowstate = e.target.getAttribute('data-name');\n      this.setState({\n        NowState: Nowstate\n      });\n\n      if (this.state.response.states.hasOwnProperty(String(Nowstate))) {\n        this.setState({\n          NowSeries: this.state.response.states[Nowstate]\n        });\n      } //console.log(this.state.response.states[Nowstate]);\n\n    };\n\n    this.onClickShowBtn = () => {\n      this.setState({\n        showChart: false,\n        showDynamicMap: true,\n        NowState: 'The United State'\n      });\n      this.generateColor();\n    };\n  }\n\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      response: res\n    })) //\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Cockpit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      className: \"map\",\n      onHover: this.onClick,\n      data: this.state.DynamicColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }), this.state.showDynamicMap ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scale\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"showDyBtn\",\n      onClick: this.onClickShowBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }, \" Time Series\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"InfoBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InfoBox, {\n      nowState: this.state.NowState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }), this.state.showChart ? null : /*#__PURE__*/React.createElement(\"p\", {\n      className: \"floating\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, this.state.beginString), this.state.showChart ? /*#__PURE__*/React.createElement(LineChart, {\n      series: this.state.NowSeries,\n      date: this.state.response.date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }) : null));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/fang/Documents/React-Complete-Guide/us-covid19/src/App.js"],"names":["React","Component","Map","InfoBox","LineChart","App","state","beginString","NowState","response","NowSeries","showChart","showDynamicMap","colors","stateColor","DynamicColor","generateColor","index","key","states","num","console","log","hasOwnProperty","newColor","setState","callApi","fetch","body","json","status","Error","message","onClick","e","Nowstate","target","getAttribute","String","onClickShowBtn","componentDidMount","then","res","catch","err","render","date"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BK,KAF0B,GAElB;AACNC,MAAAA,WAAW,EAAC,8MADN;AAENC,MAAAA,QAAQ,EAAC,EAFH;AAGNC,MAAAA,QAAQ,EAAC,EAHH;AAINC,MAAAA,SAAS,EAAC,EAJJ;AAKNC,MAAAA,SAAS,EAAE,KALL;AAMNC,MAAAA,cAAc,EAAE,KANV;AAONC,MAAAA,MAAM,EAAC,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,SAAzC,EAAmD,SAAnD,EAA6D,SAA7D,EAAuE,SAAvE,EAAiF,SAAjF,EAA2F,SAA3F,EAAqG,QAArG,EAA8G,SAA9G,CAPD;AAQNC,MAAAA,UAAU,EAAE;AAAC,mBAAU,MAAX;AAAmB,kBAAS,MAA5B;AAAoC,mBAAU,MAA9C;AAAqD,oBAAW,MAAhE;AAAwE,sBAAa,MAArF;AAA6F,oBAAW,MAAxG;AAAgH,uBAAc,MAA9H;AAAsI,oBAAW,MAAjJ;AAAwJ,gCAAuB,MAA/K;AAAuL,mBAAU,MAAjM;AAAyM,mBAAU,MAAnN;AAA2N,kBAAS,MAApO;AAA4O,iBAAQ,MAApP;AACZ,oBAAW,MADC;AACO,mBAAU,MADjB;AACyB,gBAAO,MADhC;AACwC,kBAAS,MADjD;AACyD,oBAAW,MADpE;AAC4E,qBAAY,MADxF;AAC+F,iBAAQ,MADvG;AAC+G,oBAAW,MAD1H;AACkI,yBAAgB,MADlJ;AAC0J,oBAAW,MADrK;AAC6K,qBAAY,MADzL;AAEZ,uBAAc,MAFF;AAEU,oBAAW,MAFrB;AAE6B,mBAAU,MAFvC;AAE+C,oBAAW,MAF1D;AAEkE,kBAAS,MAF3E;AAEkF,yBAAgB,MAFlG;AAE0G,sBAAa,MAFvH;AAE+H,sBAAa,MAF5I;AAEoJ,oBAAW,MAF/J;AAGZ,0BAAiB,MAHL;AAGa,wBAAe,MAH5B;AAGoC,gBAAO,MAH3C;AAGmD,oBAAW,MAH9D;AAGsE,kBAAS,MAH/E;AAGsF,wBAAe,MAHrG;AAG6G,wBAAe,MAH5H;AAGoI,0BAAiB,MAHrJ;AAG6J,wBAAe,MAH5K;AAIZ,qBAAY,MAJA;AAIQ,iBAAQ,MAJhB;AAIwB,gBAAO,MAJ/B;AAIuC,mBAAU,MAJjD;AAIyD,oBAAW,MAJpE;AAI4E,sBAAa,MAJzF;AAIgG,yBAAgB,MAJhH;AAIwH,qBAAY,MAJpI;AAI4I,mBAAU,MAJtJ;AAI6J,0BAAiB;AAJ9K,OARN;AAaNC,MAAAA,YAAY,EAAC;AAAC,mBAAU,MAAX;AAAmB,kBAAS,MAA5B;AAAoC,mBAAU,MAA9C;AAAqD,oBAAW,MAAhE;AAAwE,sBAAa,MAArF;AAA6F,oBAAW,MAAxG;AAAgH,uBAAc,MAA9H;AAAsI,oBAAW,MAAjJ;AAAwJ,gCAAuB,MAA/K;AAAuL,mBAAU,MAAjM;AAAyM,mBAAU,MAAnN;AAA2N,kBAAS,MAApO;AAA4O,iBAAQ,MAApP;AACb,oBAAW,MADE;AACM,mBAAU,MADhB;AACwB,gBAAO,MAD/B;AACuC,kBAAS,MADhD;AACwD,oBAAW,MADnE;AAC2E,qBAAY,MADvF;AAC8F,iBAAQ,MADtG;AAC8G,oBAAW,MADzH;AACiI,yBAAgB,MADjJ;AACyJ,oBAAW,MADpK;AAC4K,qBAAY,MADxL;AAEb,uBAAc,MAFD;AAES,oBAAW,MAFpB;AAE4B,mBAAU,MAFtC;AAE8C,oBAAW,MAFzD;AAEiE,kBAAS,MAF1E;AAEiF,yBAAgB,MAFjG;AAEyG,sBAAa,MAFtH;AAE8H,sBAAa,MAF3I;AAEmJ,oBAAW,MAF9J;AAGb,0BAAiB,MAHJ;AAGY,wBAAe,MAH3B;AAGmC,gBAAO,MAH1C;AAGkD,oBAAW,MAH7D;AAGqE,kBAAS,MAH9E;AAGqF,wBAAe,MAHpG;AAG4G,wBAAe,MAH3H;AAGmI,0BAAiB,MAHpJ;AAG4J,wBAAe,MAH3K;AAIb,qBAAY,MAJC;AAIO,iBAAQ,MAJf;AAIuB,gBAAO,MAJ9B;AAIsC,mBAAU,MAJhD;AAIwD,oBAAW,MAJnE;AAI2E,sBAAa,MAJxF;AAI+F,yBAAgB,MAJ/G;AAIuH,qBAAY,MAJnI;AAI2I,mBAAU,MAJrJ;AAI4J,0BAAiB;AAJ7K;AAbP,KAFkB;;AAAA,SAuB1BC,aAvB0B,GAuBXC,KAAD,IAAS;AACrB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,GAAG,CAAR;;AACA,WAAI,IAAIC,GAAR,IAAe,KAAKZ,KAAL,CAAWG,QAAX,CAAoBU,MAAnC,EAA0C;AACxC,YAAIC,GAAG,GAAG,KAAKd,KAAL,CAAWG,QAAX,CAAoBU,MAApB,CAA2BD,GAA3B,CAAV;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;;AACA,YAAGE,GAAG,CAACH,KAAD,CAAH,IAAY,EAAf,EAAkB;AAChB,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFD,MAGK,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,EAAX,IAAiBG,GAAG,CAACH,KAAD,CAAH,IAAY,GAAhC,EAAoC;AACvC,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,GAAX,IAAkBG,GAAG,CAACH,KAAD,CAAH,IAAY,GAAjC,EAAqC;AACxC,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,GAAX,IAAkBG,GAAG,CAACH,KAAD,CAAH,IAAY,IAAjC,EAAsC;AACzC,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,IAAX,IAAmBG,GAAG,CAACH,KAAD,CAAH,IAAY,IAAlC,EAAuC;AAC1C,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,IAAX,IAAmBG,GAAG,CAACH,KAAD,CAAH,IAAY,IAAlC,EAAuC;AAC1C,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,IAAX,IAAmBG,GAAG,CAACH,KAAD,CAAH,IAAY,IAAlC,EAAuC;AAC1C,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,IAAX,IAAmBG,GAAG,CAACH,KAAD,CAAH,IAAY,KAAlC,EAAwC;AAC3C,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,KAAX,IAAoBG,GAAG,CAACH,KAAD,CAAH,IAAY,KAAnC,EAAyC;AAC5C,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,KAAX,IAAoBG,GAAG,CAACH,KAAD,CAAH,IAAY,KAAnC,EAAyC;AAC5C,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,KAAX,IAAoBG,GAAG,CAACH,KAAD,CAAH,IAAY,KAAnC,EAAyC;AAC5C,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,EAAlB,CAAP;AACD,SAFI,MAGA,IAAGO,GAAG,CAACH,KAAD,CAAH,GAAW,KAAd,EAAoB;AACvB,iBAAO,KAAKX,KAAL,CAAWO,MAAX,CAAkB,EAAlB,CAAP;AACD,SAtCuC,CAuCxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,YAAG,KAAKP,KAAL,CAAWS,YAAX,CAAwBQ,cAAxB,CAAuCL,GAAvC,CAAH,EAA+C;AAC9C,gBAAMM,QAAQ,GAAI,KAAKlB,KAAL,CAAWS,YAA7B;AACAS,UAAAA,QAAQ,CAACN,GAAD,CAAR,GAAgBE,GAAhB;AACA,eAAKK,QAAL,CAAc;AAACV,YAAAA,YAAY,EAACS;AAAd,WAAd;AACA,SAJD,MAKI;AACF,eAAKC,QAAL,CAAc;AAACV,YAAAA,YAAY,EAAC,EAAC,GAAG,KAAKT,KAAL,CAAWS,YAAf;AAA6B,eAACG,GAAD,GAAME;AAAnC;AAAd,WAAd;AACD,SArFuC,CAsFxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAEHC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,KAAL,CAAWS,YAAvB;AAEC,KA/HyB;;AAAA,SA0I1BW,OA1I0B,GA0IhB,YAAY;AACpB,YAAMjB,QAAQ,GAAG,MAAMkB,KAAK,CAAC,MAAD,CAA5B;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACA,YAAMmB,IAAI,GAAG,MAAMnB,QAAQ,CAACoB,IAAT,EAAnB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,UAAIb,QAAQ,CAACqB,MAAT,KAAoB,GAAxB,EAA6B,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AAE7B,aAAOJ,IAAP;AACD,KAlJyB;;AAAA,SAoJ1BK,OApJ0B,GAoJjBC,CAAD,IAAK;AACX;AACA,WAAKT,QAAL,CAAc;AAACd,QAAAA,SAAS,EAAC,IAAX;AAAgBC,QAAAA,cAAc,EAAE;AAAhC,OAAd;AACA,UAAIuB,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,YAAT,CAAsB,WAAtB,CAAf;AACA,WAAKZ,QAAL,CAAc;AAACjB,QAAAA,QAAQ,EAAC2B;AAAV,OAAd;;AAEA,UAAG,KAAK7B,KAAL,CAAWG,QAAX,CAAoBU,MAApB,CAA2BI,cAA3B,CAA0Ce,MAAM,CAACH,QAAD,CAAhD,CAAH,EAA+D;AAC5D,aAAKV,QAAL,CAAc;AAACf,UAAAA,SAAS,EAAC,KAAKJ,KAAL,CAAWG,QAAX,CAAoBU,MAApB,CAA2BgB,QAA3B;AAAX,SAAd;AACD,OARS,CAUX;;AACD,KA/JyB;;AAAA,SAiK1BI,cAjK0B,GAiKX,MAAI;AACjB,WAAKd,QAAL,CAAc;AAACd,QAAAA,SAAS,EAAE,KAAZ;AAAkBC,QAAAA,cAAc,EAAE,IAAlC;AAAuCJ,QAAAA,QAAQ,EAAC;AAAhD,OAAd;AACA,WAAKQ,aAAL;AACD,KApKyB;AAAA;;AAiI1BwB,EAAAA,iBAAiB,GAAE;AAEjB,SAAKd,OAAL,GACGe,IADH,CACQC,GAAG,IAAI,KAAKjB,QAAL,CAAc;AAAEhB,MAAAA,QAAQ,EAAEiC;AAAZ,KAAd,CADf,EACiD;AADjD,KAEGC,KAFH,CAESC,GAAG,IAAIvB,OAAO,CAACC,GAAR,CAAYsB,GAAZ,CAFhB;AAMD;;AA6BDC,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,OAAO,EAAE,KAAKZ,OAAnC;AAA4C,MAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWS,YAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKT,KAAL,CAAWM,cAAX,gBAA0B;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA1B,GAAwD,IAF3D,eAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,OAAO,EAAE,KAAK2B,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,CADF,eAME;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,OAAD;AAAS,MAAA,QAAQ,EAAE,KAAKjC,KAAL,CAAWE,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKF,KAAL,CAAWK,SAAX,GAAsB,IAAtB,gBACD;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyB,KAAKL,KAAL,CAAWC,WAApC,CAHF,EAKG,KAAKD,KAAL,CAAWK,SAAX,gBACD,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKL,KAAL,CAAWI,SAA9B;AAAyC,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWG,QAAX,CAAoBqC,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,GAC2E,IAN9E,CANF,CADF;AAmBD;;AA3LyB;;AAgM5B,eAAezC,GAAf","sourcesContent":["import React,{Component} from 'react';\nimport Map from './Component/Map';\nimport InfoBox from './Component/InfoBox';\nimport LineChart from './Component/LineChart';\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    beginString:'Hi, this is a visualization map for showing COVID-19 confirmed cases in United States. Now you can click on the map to see trend chart for each states. The open data is on the Github provided by JHU CSSE.',\n    NowState:'',\n    response:'',\n    NowSeries:[],\n    showChart: false,\n    showDynamicMap: false,\n    colors:['#61c661','#b1dbb9','#c6e9c6','#ffe693','#ffd950','#ffbb56','#f2b691','#f49a61','#f4833d','#f76d17','ff5619','#ff3f00'],\n    stateColor: {'Alabama':'#333', 'Alaska':'#333', 'Arizona':'#333','Arkansas':'#333', 'California':'#333', 'Colorado':'#333', 'Connecticut':'#333', 'Delaware':'#333','District of Columbia':'#333', 'Florida':'#333', 'Georgia':'#333', 'Hawaii':'#333', 'Idaho':'#333',\n    'Illinois':'#333', 'Indiana':'#333', 'Iowa':'#333', 'Kansas':'#333', 'Kentucky':'#333', 'Louisiana':'#333','Maine':'#333', 'Maryland':'#333', 'Massachusetts':'#333', 'Michigan':'#333', 'Minnesota':'#333',\n    'Mississippi':'#333', 'Missouri':'#333', 'Montana':'#333', 'Nebraska':'#333', 'Nevada':'#333','New Hampshire':'#333', 'New Jersey':'#333', 'New Mexico':'#333', 'New York':'#333',\n    'North Carolina':'#333', 'North Dakota':'#333', 'Ohio':'#333', 'Oklahoma':'#333', 'Oregon':'#333','Pennsylvania':'#333', 'Rhode Island':'#333', 'South Carolina':'#333', 'South Dakota':'#333',\n    'Tennessee':'#333', 'Texas':'#333', 'Utah':'#333', 'Vermont':'#333', 'Virginia':'#333', 'Washington':'#333','West Virginia':'#333', 'Wisconsin':'#333', 'Wyoming':'#333','Grand Princess':'#333'},\n    DynamicColor:{'Alabama':'#333', 'Alaska':'#333', 'Arizona':'#333','Arkansas':'#333', 'California':'#333', 'Colorado':'#333', 'Connecticut':'#333', 'Delaware':'#333','District of Columbia':'#333', 'Florida':'#333', 'Georgia':'#333', 'Hawaii':'#333', 'Idaho':'#333',\n    'Illinois':'#333', 'Indiana':'#333', 'Iowa':'#333', 'Kansas':'#333', 'Kentucky':'#333', 'Louisiana':'#333','Maine':'#333', 'Maryland':'#333', 'Massachusetts':'#333', 'Michigan':'#333', 'Minnesota':'#333',\n    'Mississippi':'#333', 'Missouri':'#333', 'Montana':'#333', 'Nebraska':'#333', 'Nevada':'#333','New Hampshire':'#333', 'New Jersey':'#333', 'New Mexico':'#333', 'New York':'#333',\n    'North Carolina':'#333', 'North Dakota':'#333', 'Ohio':'#333', 'Oklahoma':'#333', 'Oregon':'#333','Pennsylvania':'#333', 'Rhode Island':'#333', 'South Carolina':'#333', 'South Dakota':'#333',\n    'Tennessee':'#333', 'Texas':'#333', 'Utah':'#333', 'Vermont':'#333', 'Virginia':'#333', 'Washington':'#333','West Virginia':'#333', 'Wisconsin':'#333', 'Wyoming':'#333','Grand Princess':'#333'}\n    }\n\n\n  generateColor=(index)=>{\n    // let state_color = [];\n    //let copy = this.state.response.states;\n    //this.setState({stateColor:copy});\n    //console.log(this.state.stateColor);\n    index = 0;\n    for(let key in this.state.response.states){\n      let num = this.state.response.states[key];\n      console.log(key);\n      if(num[index]<=10){\n        return this.state.colors[0];\n      }\n      else if(num[index]>10 && num[index]<=100){\n        return this.state.colors[1];\n      }\n      else if(num[index]>100 && num[index]<=500){\n        return this.state.colors[2];\n      }\n      else if(num[index]>500 && num[index]<=1000){\n        return this.state.colors[3];\n      }\n      else if(num[index]>1000 && num[index]<=2000){\n        return this.state.colors[4];\n      }\n      else if(num[index]>2000 && num[index]<=4000){\n        return this.state.colors[5];\n      }\n      else if(num[index]>4000 && num[index]<=8000){\n        return this.state.colors[6];\n      }\n      else if(num[index]>8000 && num[index]<=12000){\n        return this.state.colors[7];\n      }\n      else if(num[index]>12000 && num[index]<=16000){\n        return this.state.colors[8];\n      }\n      else if(num[index]>16000 && num[index]<=20000){\n        return this.state.colors[9];\n      }\n      else if(num[index]>20000 && num[index]<=30000){\n        return this.state.colors[10];\n      }\n      else if(num[index]>30000){\n        return this.state.colors[11];\n      }\n      // let series = this.state.response.states[key].map((num)=>{\n      //   if(num<=10){\n      //     return this.state.colors[0];\n      //   }\n      //   else if(num>10 && num<=100){\n      //     return this.state.colors[1];\n      //   }\n      //   else if(num>100 && num<=500){\n      //     return this.state.colors[2];\n      //   }\n      //   else if(num>500 && num<=1000){\n      //     return this.state.colors[3];\n      //   }\n      //   else if(num>1000 && num<=2000){\n      //     return this.state.colors[4];\n      //   }\n      //   else if(num>2000 && num<=4000){\n      //     return this.state.colors[5];\n      //   }\n      //   else if(num>4000 && num<=8000){\n      //     return this.state.colors[6];\n      //   }\n      //   else if(num>8000 && num<=12000){\n      //     return this.state.colors[7];\n      //   }\n      //   else if(num>12000 && num<=16000){\n      //     return this.state.colors[8];\n      //   }\n      //   else if(num>16000 && num<=20000){\n      //     return this.state.colors[9];\n      //   }\n      //   else if(num>20000 && num<=30000){\n      //     return this.state.colors[10];\n      //   }\n      //   else if(num>30000){\n      //     return this.state.colors[11];\n      //   }\n        \n      // })\n      if(this.state.DynamicColor.hasOwnProperty(key)){   \n       const newColor  = this.state.DynamicColor;\n       newColor[key] = num;\n       this.setState({DynamicColor:newColor});\n      }\n      else{\n        this.setState({DynamicColor:{...this.state.DynamicColor, [key]:num}});\n      }\n      // if(this.state.stateColor.hasOwnProperty(key)){   \n      //   const newColor  = this.state.stateColor;\n      //   newColor[key] = series;\n      //   this.setState({stateColor:newColor});\n      // }\n      // else{\n      //   this.setState({stateColor:{...this.state.stateColor, [key]:series}});\n      // }\n    }\n  \n  console.log(this.state.DynamicColor);\n\n  }\n\n  componentDidMount(){\n    \n    this.callApi()\n      .then(res => this.setState({ response: res })) //\n      .catch(err => console.log(err));\n\n    \n    \n  }\n  callApi = async () => {\n    const response = await fetch('/api'); \n    console.log(response);\n    const body = await response.json();\n    console.log(\"success\");\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  };\n \n  onClick=(e)=>{\n    //this.generateColor();\n    this.setState({showChart:true,showDynamicMap: false});\n    let Nowstate = e.target.getAttribute('data-name');\n    this.setState({NowState:Nowstate});\n\n    if(this.state.response.states.hasOwnProperty(String(Nowstate))){\n       this.setState({NowSeries:this.state.response.states[Nowstate]});\n     }\n      \n    //console.log(this.state.response.states[Nowstate]);\n  }\n\n  onClickShowBtn=()=>{\n    this.setState({showChart: false,showDynamicMap: true,NowState:'The United State'});\n    this.generateColor();\n  }\n\n  render() {\n    \n    return(\n      <div className=\"App\">\n        <div className=\"Cockpit\">\n          <Map className=\"map\" onHover={this.onClick} data={this.state.DynamicColor}/> \n          {this.state.showDynamicMap?<div className=\"scale\"></div>:null}\n          <div className=\"showDyBtn\" onClick={this.onClickShowBtn}> Time Series</div>\n        </div>\n        <div className=\"InfoBox\">\n          <InfoBox nowState={this.state.NowState}/>\n          {this.state.showChart? null:\n          <p className=\"floating\">{this.state.beginString}</p>\n          }\n          {this.state.showChart?\n          <LineChart series={this.state.NowSeries} date={this.state.response.date}/>: null\n          }\n          \n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}