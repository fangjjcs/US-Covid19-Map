{"ast":null,"code":"var _jsxFileName = \"/Users/fang/Documents/React-Complete-Guide/us-covid19/src/Component/LineChart.js\";\nimport React, { Component } from 'react';\nimport './LineChart.css';\nimport 'c3/c3.css';\nimport c3 from 'c3';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.renderChart = this.renderChart.bind(this);\n  }\n\n  renderChart() {\n    const data = this.props.series;\n    let time_series = ['time series'];\n    time_series = time_series.concat(data); //console.log(this.props);\n\n    const date = this.props.date;\n    let date_series = ['x'];\n    date_series = date_series.concat(date);\n    var myData = {};\n    myData.x = 'x';\n    myData.xFormat = \"%m/%d/%Y\";\n    myData.type = 'bar';\n    let myX = date;\n    let myY = data;\n    myX.splice(0, 0, 'x');\n    myY.splice(0, 0, 'New Reports');\n    myData.columns = [];\n    myData.columns.push(myX);\n    myData.columns.push(myY);\n    var chart = c3.generate({\n      bindto: '#line',\n      data: myData,\n      size: {\n        height: 280,\n        width: 400\n      },\n      bar: {\n        width: {\n          ratio: 0.5 // this makes bar width 50% of length between ticks\n\n        } // or\n        //width: 100 // this makes bar width 100px\n\n      },\n      axis: {\n        x: {\n          type: 'timeseries',\n          tick: {\n            format: \"%b-%d\"\n          }\n        }\n      }\n    });\n  }\n\n  componentDidMount() {//this.renderChart();\n  }\n\n  componentDidUpdate() {\n    this.renderChart();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Line\",\n      id: \"line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default LineChart;","map":{"version":3,"sources":["/Users/fang/Documents/React-Complete-Guide/us-covid19/src/Component/LineChart.js"],"names":["React","Component","c3","LineChart","constructor","props","renderChart","bind","data","series","time_series","concat","date","date_series","myData","x","xFormat","type","myX","myY","splice","columns","push","chart","generate","bindto","size","height","width","bar","ratio","axis","tick","format","componentDidMount","componentDidUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,iBAAP;AACA,OAAO,WAAP;AACA,OAAOC,EAAP,MAAe,IAAf;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAiC;AAE7BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDD,EAAAA,WAAW,GAAE;AACT,UAAME,IAAI,GAAG,KAAKH,KAAL,CAAWI,MAAxB;AACA,QAAIC,WAAW,GAAG,CAAC,aAAD,CAAlB;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBH,IAAnB,CAAd,CAHS,CAKT;;AACA,UAAMI,IAAI,GAAG,KAAKP,KAAL,CAAWO,IAAxB;AACA,QAAIC,WAAW,GAAG,CAAC,GAAD,CAAlB;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACF,MAAZ,CAAmBC,IAAnB,CAAd;AAEA,QAAIE,MAAM,GAAG,EAAb;AAEAA,IAAAA,MAAM,CAACC,CAAP,GAAW,GAAX;AACAD,IAAAA,MAAM,CAACE,OAAP,GAAiB,UAAjB;AACAF,IAAAA,MAAM,CAACG,IAAP,GAAc,KAAd;AACA,QAAIC,GAAG,GAAGN,IAAV;AACA,QAAIO,GAAG,GAAGX,IAAV;AACAU,IAAAA,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,GAAjB;AACAD,IAAAA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,aAAjB;AACAN,IAAAA,MAAM,CAACO,OAAP,GAAiB,EAAjB;AACAP,IAAAA,MAAM,CAACO,OAAP,CAAeC,IAAf,CAAoBJ,GAApB;AACAJ,IAAAA,MAAM,CAACO,OAAP,CAAeC,IAAf,CAAoBH,GAApB;AACA,QAAII,KAAK,GAAGrB,EAAE,CAACsB,QAAH,CAAY;AACxBC,MAAAA,MAAM,EAAE,OADgB;AAExBjB,MAAAA,IAAI,EAAEM,MAFkB;AAGxBY,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAE,GADN;AAEFC,QAAAA,KAAK,EAAE;AAFL,OAHkB;AAOxBC,MAAAA,GAAG,EAAE;AACDD,QAAAA,KAAK,EAAE;AACPE,UAAAA,KAAK,EAAE,GADA,CACI;;AADJ,SADN,CAID;AACA;;AALC,OAPmB;AAcxBC,MAAAA,IAAI,EAAE;AACFhB,QAAAA,CAAC,EAAE;AACHE,UAAAA,IAAI,EAAE,YADH;AAEHe,UAAAA,IAAI,EAAE;AACEC,YAAAA,MAAM,EAAE;AADV;AAFH;AADD;AAdkB,KAAZ,CAAZ;AA0BH;;AACDC,EAAAA,iBAAiB,GAAE,CACf;AACH;;AACDC,EAAAA,kBAAkB,GAAE;AAChB,SAAK7B,WAAL;AACH;;AAED8B,EAAAA,MAAM,GAAE;AAGJ,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,EAAE,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AArE4B;;AAyEjC,eAAejC,SAAf","sourcesContent":["import React, {Component} from 'react';\nimport './LineChart.css';\nimport 'c3/c3.css';\nimport c3 from 'c3';\n\nclass LineChart extends Component{\n    \n    constructor(props){\n        super(props);\n        this.renderChart = this.renderChart.bind(this);\n    }\n    \n    renderChart(){\n        const data = this.props.series;\n        let time_series = ['time series']; \n        time_series = time_series.concat(data); \n\n        //console.log(this.props);\n        const date = this.props.date;\n        let date_series = ['x']; \n        date_series = date_series.concat(date); \n\n        var myData = {};\n\n        myData.x = 'x';\n        myData.xFormat = \"%m/%d/%Y\";\n        myData.type = 'bar';\n        let myX = date;\n        let myY = data;\n        myX.splice(0, 0, 'x');\n        myY.splice(0, 0, 'New Reports');\n        myData.columns = [];\n        myData.columns.push(myX);\n        myData.columns.push(myY);\n        var chart = c3.generate({\n        bindto: '#line',\n        data: myData,\n        size: {\n            height: 280,\n            width: 400,\n        },\n        bar: {\n            width: {\n            ratio: 0.5 // this makes bar width 50% of length between ticks\n            }\n            // or\n            //width: 100 // this makes bar width 100px\n        },\n        axis: {\n            x: {\n            type: 'timeseries',\n            tick: {\n                    format: \"%b-%d\"\n                }\n            },\n        \n        }\n        })\n\n        \n    }\n    componentDidMount(){\n        //this.renderChart();\n    }\n    componentDidUpdate(){\n        this.renderChart();\n    }\n     \n    render(){\n\n\n        return(\n            <div className=\"Line\" id=\"line\"></div>\n        );\n    }\n    \n}\n\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}